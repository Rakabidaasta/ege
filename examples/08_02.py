# Тип №8 использует основные формулы по комбинаторике
# С ними можно познакомиться здесь https://habr.com/ru/articles/479816/
# и здесь https://habr.com/ru/companies/otus/articles/529356/

# Тип №8. Подсчет количества слов с ограничениями
# Задание №7667
# Задания для самопроверки: №7921, №7986

# В задачах этого типа очень часто нужно использовать библиотеку itertools
# А в частности функцию product (размещения с повторениями)
from itertools import product 


# Сколько слов ...
count = 0

# ... длины 5 можно составить из букв Е, Г, Э ...
for p in product("ЕГЭ", repeat=5):
    # ... начинающихся с гласной буквы 
    if p[0] == "Е" or p[0] == "Э":
        count += 1

print(count)


# Тип №8. Подсчет количества слов с ограничениями
# Задание №18491
# Задания для самопроверки: №16813, №17328


# Каждую букву нужно использовать ровно 1 раз,
from itertools import permutations


# Сколько различных кодов может составить Ольга?
count = 0

# Ольга составляет 5-буквенные коды из букв О, Л, Ь, Г, А. 
for p in permutations("ОЛЬГА", 5):
    # при этом Ь нельзя ставить первым ...
    if p[0] == "Ь":
        continue

    s = "".join(p)
    s = s.replace("О", "!").replace("А", "!")

    # ... и нельзя ставить после гласной. 
    if "!Ь" in s:
        count += 1

print(count)


# Тип №8. Подсчет количества слов с ограничениями
# Задание №40983
# Задания для самопроверки: №40724, №46966

# Сколько кодов может составить Георгий?
count = 0

res = []

# Код должен состоять из 7 букв, и каждая буква в нём должна встречаться 
# столько же раз, сколько в имени Георгий.
for p in permutations("ГЕОРГИЙ", 7):

    # flag - переменная, которая говорит подходит нам это слово или нет 
    # (True, False соответственно)
    # На этом этапе мы ещё не проверили слово и оно нам подходит
    flag = True 

    # ... одинаковые буквы в коде не должны стоять рядом.
    for i in range(len(p) - 1):

        # Если текущая буква совпадает с впередиидущей, то слово нам не подходит
        if p[i] == p[i+1]:
            flag = False

            # Нет смысла дальше проверять, выходим из цикла
            break

    # Если слово по-прежнему подходит, то увеличиваем счётчик
    if flag:
        count += 1

print(len(res))
print(count)

import itertools
ar = itertools.permutations("ГЕОРГИЙ", 7) #Размещение
arl = []
for e in ar:
    arl.append(list(e))
a = set()
for e in arl:
    flag = True
    s = ""
    for i in range(len(e)-1):
        s += e[i]
        if e[i] == e[i + 1]:
            flag = False
    if flag:
        # print(s)
        a.add(s)
# print(len(a))